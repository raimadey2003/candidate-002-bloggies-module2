export interface MemeData {
  topText: string;
  bottomText: string;
  imageUrl?: string;
}

export interface MemeResponse {
  imageData: string; // base64 encoded PNG
  altText: string;
  width: number;
  height: number;
}

export async function generateMeme(data: MemeData): Promise<MemeResponse> {
  // Create canvas for meme generation
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  
  if (!ctx) {
    throw new Error('Canvas context not available');
  }

  // Set canvas size
  canvas.width = 500;
  canvas.height = 500;

  // Create gradient background
  const gradient = ctx.createLinearGradient(0, 0, 0, 500);
  gradient.addColorStop(0, '#8B5CF6');
  gradient.addColorStop(1, '#3B82F6');
  
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, 500, 500);

  // Add border
  ctx.strokeStyle = '#FFFFFF';
  ctx.lineWidth = 4;
  ctx.strokeRect(2, 2, 496, 496);

  // Configure text style
  ctx.fillStyle = '#FFFFFF';
  ctx.strokeStyle = '#000000';
  ctx.lineWidth = 3;
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';

  // Function to draw text with outline
  const drawText = (text: string, x: number, y: number, maxWidth: number) => {
    const lines = wrapText(ctx, text, maxWidth);
    const lineHeight = 40;
    const startY = y - ((lines.length - 1) * lineHeight) / 2;

    lines.forEach((line, index) => {
      const lineY = startY + index * lineHeight;
      ctx.strokeText(line, x, lineY);
      ctx.fillText(line, x, lineY);
    });
  };

  // Function to wrap text
  const wrapText = (context: CanvasRenderingContext2D, text: string, maxWidth: number) => {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = words[0];

    for (let i = 1; i < words.length; i++) {
      const word = words[i];
      const width = context.measureText(currentLine + ' ' + word).width;
      if (width < maxWidth) {
        currentLine += ' ' + word;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    }
    lines.push(currentLine);
    return lines;
  };

  // Draw top text
  if (data.topText) {
    ctx.font = 'bold 28px Arial';
    drawText(data.topText.toUpperCase(), 250, 100, 450);
  }

  // Draw bottom text
  if (data.bottomText) {
    ctx.font = 'bold 28px Arial';
    drawText(data.bottomText.toUpperCase(), 250, 400, 450);
  }

  // Add meme watermark
  ctx.font = '12px Arial';
  ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
  ctx.textAlign = 'right';
  ctx.fillText('Generated by Meme Bot Pro', 490, 490);

  // Convert to base64
  const imageData = canvas.toDataURL('image/png');
  const altText = `Meme with text: "${data.topText}" and "${data.bottomText}"`;

  return {
    imageData,
    altText,
    width: 500,
    height: 500
  };
}